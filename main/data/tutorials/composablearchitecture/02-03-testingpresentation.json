{"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","interfaceLanguage":"swift"},"metadata":{"role":"project","title":"Testing presentation","category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture"},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"project","variants":[{"paths":["\/tutorials\/composablearchitecture\/02-03-testingpresentation"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"modules":[{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"sections":[{"estimatedTimeInMinutes":40,"title":"Testing presentation","chapter":"Navigation","kind":"hero","content":[{"inlineContent":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"type":"paragraph"}]},{"tasks":[{"title":"Testing the add contact flow","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The first functionality we will test is adding a new contact. This entails emulating the","type":"text"},{"text":" ","type":"text"},{"text":"entire user flow of the user tapping the “+” button, typing into the name text field,","type":"text"},{"text":" ","type":"text"},{"text":"tapping the “Save” button, and confirming that the sheet is dismissed and the new contact","type":"text"},{"text":" ","type":"text"},{"text":"is added to the list.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Add a new file, ContactsFeatureTests.swift, to your test target and paste in some basic"},{"type":"text","text":" "},{"type":"text","text":"scaffolding for a test."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0000.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Construct a test store by supplying the initial state the feature should start in, as well"},{"type":"text","text":" "},{"type":"text","text":"as the reducer that is being tested."}],"type":"paragraph"}],"runtimePreview":null,"caption":[{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","isActive":true},{"type":"text","text":" for a tutorial on testing, as well as the article"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","isActive":true},{"type":"text","text":" for more detailed information."}]}]}],"media":null,"code":"02-03-01-code-0001.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user tapping on the “+” button by sending the "},{"type":"codeVoice","code":"addButtonTapped"},{"type":"text","text":" action. The"},{"type":"text","text":" "},{"type":"text","text":"trailing closure provided is where we will assert on how state changes after sending"},{"type":"text","text":" "},{"type":"text","text":"the action."}]}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0002.swift"},{"type":"step","content":[{"inlineContent":[{"text":"The only mutation we expect to happen is that the ","type":"text"},{"type":"codeVoice","code":"destination"},{"text":" field becomes populated","type":"text"},{"text":" ","type":"text"},{"text":"with some data, in particular the ","type":"text"},{"type":"codeVoice","code":"addContact"},{"text":" case of the destination enum.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0003.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case will hold onto some data, which is ","type":"text"},{"code":"AddContactFeature.State","type":"codeVoice"},{"text":".","type":"text"}]}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0004.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To construct that state we need to construct a "},{"type":"codeVoice","code":"Contact"},{"type":"text","text":" value, and now we run into"},{"type":"text","text":" "},{"type":"text","text":"trouble. What can we provide for the ID?"}]}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0005.swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":" currently makes use of an uncontrolled dependency, making it very hard","type":"text"},{"text":" ","type":"text"},{"text":"to test this feature. It constructs a random UUID when presenting this feature, and we can’t","type":"text"},{"text":" ","type":"text"},{"text":"predict that ID to get a passing test. So, just as we did in ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"we will add a dependency on a UUID generator to our ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift, and add a dependency on the UUID generator."}]}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0006.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the newly added UUID dependency for creating UUIDs rather than reaching out to the"},{"type":"text","text":" "},{"type":"text","text":"global, uncontrollable initializer."}]}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0007.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and override the dependencies on the test store so"},{"type":"text","text":" "},{"type":"text","text":"that it uses a controlled UUID generator. In particular, we will use the “incrementing”"},{"type":"text","text":" "},{"type":"text","text":"generator, which generates sequential, increasing IDs starting at 0."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0008.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now we can predict the UUID generated when the contact is created."}]}],"runtimePreview":null,"caption":[{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The initializer on UUID that allows providing an integer is provided by our","type":"text"},{"text":" ","type":"text"},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies","isActive":true,"type":"reference"},{"text":" library, which the Composable Architecture","type":"text"},{"text":" ","type":"text"},{"text":"depends on.","type":"text"}]}],"name":"Note"}],"media":null,"code":"02-03-01-code-0009.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test passes! So this proves that when the “+” button is tapped, that a sheet will fly"},{"type":"text","text":" "},{"type":"text","text":"up for the “Add Contact” feature. Let’s keep asserting on more of the user flow."}]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Emulate the user typing into the name text field of the contact. The trailing closure is"},{"type":"text","text":" "},{"type":"text","text":"where we can assert on how state changed after sending the action."}]}],"runtimePreview":null,"caption":[{"content":[{"inlineContent":[{"text":"The payload of an action can be sent as a second argument when using case key path","type":"text"},{"text":" ","type":"text"},{"text":"syntax.","type":"text"}],"type":"paragraph"}],"name":"Tip","type":"aside","style":"tip"}],"media":null,"code":"02-03-01-code-0010.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Assert on how state changed by mutating the ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" through the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case of","type":"text"},{"text":" ","type":"text"},{"text":"the destination enum.","type":"text"}]}],"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"To do this we can chain into the ","type":"text"},{"code":"addContact","type":"codeVoice"},{"text":" case name directly and mutate a part of its","type":"text"},{"text":" ","type":"text"},{"text":"associated value.","type":"text"}]},{"type":"aside","name":"Tip","content":[{"inlineContent":[{"type":"text","text":"To use the "},{"type":"codeVoice","code":"modify"},{"type":"text","text":" helper on an enum to mutate an associated value, the enum must"},{"type":"text","text":" "},{"type":"text","text":"be annotated with "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". The "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":" macro automatically applies"},{"type":"text","text":" "},{"type":"text","text":"this annotation to enum-based "},{"type":"codeVoice","code":"State"},{"type":"text","text":", but you must manually apply it to other enums."}],"type":"paragraph"}],"style":"tip"}],"media":null,"code":"02-03-01-code-0011.swift"},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping the “Save” button in the “Add Contact” feature. We do not"},{"type":"text","text":" "},{"type":"text","text":"expect the state to change immediately when sending this action, and so we do not need"},{"type":"text","text":" "},{"type":"text","text":"to provide a trailing closure."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0012.swift"},{"type":"step","content":[{"inlineContent":[{"text":"Emulate the delegate action ","type":"text"},{"type":"codeVoice","code":"saveContact"},{"text":" being received by the test store. This action is","type":"text"},{"text":" ","type":"text"},{"text":"sent from the ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"text":" when the “Save” button is tapped.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0013.swift"},{"type":"step","content":[{"inlineContent":[{"text":"Assert that when a delegate action is received that state mutates by adding a contact to the","type":"text"},{"text":" ","type":"text"},{"text":"array.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0014.swift"},{"type":"step","content":[{"inlineContent":[{"text":"To further assert that the ","type":"text"},{"code":"saveContact","type":"codeVoice"},{"text":" delegate action was received, you must","type":"text"},{"text":" ","type":"text"},{"text":"annotate ","type":"text"},{"code":"AddContactFeature.Action.Delegate","type":"codeVoice"},{"text":" with the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0015.swift"},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Now you can further dive into the ","type":"text"},{"code":"saveContact","type":"codeVoice"},{"text":" case and even assert against its payload.","type":"text"}]}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0016.swift"},{"type":"step","content":[{"inlineContent":[{"text":"Finally assert that the test store receives a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"reference"},{"text":" action, which causes the “Add Contact”","type":"text"},{"text":" ","type":"text"},{"text":"feature to be dismissed.","type":"text"}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"media":null,"code":"02-03-01-code-0017.swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is a fully passing test, and proves the end-to-end lifecycle of presenting a child"},{"type":"text","text":" "},{"type":"text","text":"feature, interacting with it, and how the child communicates information back to the parent."},{"type":"text","text":" "},{"type":"text","text":"However, this test is quite verbose, and is asserting on behavior that is local to just the"},{"type":"text","text":" "},{"type":"text","text":"“Add Contact” feature. If we are only wanting to test at a high level that we can present"},{"type":"text","text":" "},{"type":"text","text":"and dismiss a child feature, there is a better tool available called “non-exhaustive”"},{"type":"text","text":" "},{"type":"text","text":"testing."}]}],"anchor":"Testing-the-add-contact-flow"},{"title":"Non-exhaustive testing","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The previously written test is powerful and impressive, but also verbose. We had to assert"},{"type":"text","text":" "},{"type":"text","text":"on how everything evolves in the child feature, and had to assert how every effect action"},{"type":"text","text":" "},{"type":"text","text":"is received by the store. Sometimes it can be useful to write tests in a less exhaustive"},{"type":"text","text":" "},{"text":"manner, especially when testing the integration of many features, such as is the case with","type":"text"},{"text":" ","type":"text"},{"text":"features performing navigation.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing"},{"type":"text","text":" for more information on non-exhaustive testing"},{"type":"text","text":" "},{"type":"text","text":"techniques."}]}]}],"stepsSection":[{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0000.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Start a new test case to test the same “Add Contact” user flow as above, but this time","type":"text"},{"text":" ","type":"text"},{"text":"we will do it in the non-exhaustive style.","type":"text"}]}],"runtimePreview":null},{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0001.swift","content":[{"inlineContent":[{"type":"text","text":"Set the test store’s "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","isActive":true},{"type":"text","text":" to "},{"type":"codeVoice","code":".off"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0002.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping on the “+” button, but this time do not provide a trailing","type":"text"},{"text":" ","type":"text"},{"text":"closure. In non-exhaustive test stores there is no need to assert on state changes if you","type":"text"},{"text":" ","type":"text"},{"text":"do not want to.","type":"text"}]}],"runtimePreview":null},{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user typing into the name text field of the contact, but again do not assert","type":"text"},{"text":" ","type":"text"},{"text":"on any state changes in the child feature.","type":"text"}]}],"runtimePreview":null},{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Emulate the user tapping the “Save” button in the child feature.","type":"text"}]}],"runtimePreview":null},{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0005.swift","content":[{"inlineContent":[{"type":"text","text":"Next we want to assert that sometime after the user taps the “Save” button that the"},{"type":"text","text":" "},{"type":"text","text":"contact is added to the array and the child feature is dismissed. However, we cannot assert"},{"type":"text","text":" "},{"type":"text","text":"on that until all the actions have been received, and so we can do that by using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null},{"type":"step","caption":[],"media":null,"code":"02-03-02-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Assert that the final state of the feature has a new contact added to the array and the","type":"text"},{"text":" ","type":"text"},{"code":"destination","type":"codeVoice"},{"text":" state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":"’d out.","type":"text"}]}],"runtimePreview":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to write a very high level test covering the full user flow of adding"},{"type":"text","text":" "},{"type":"text","text":"a new contact to the list. We don’t need to assert on all of the nitty gritty details in"},{"type":"text","text":" "},{"type":"text","text":"the child feature, and instead can just assert that the contact was indeed added after the"},{"type":"text","text":" "},{"type":"text","text":"user completed their steps."}]}],"anchor":"Non-exhaustive-testing"},{"title":"Testing the delete contact flow","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"The last important piece of functionality to test is deleting a contact. This involves tapping"},{"type":"text","text":" "},{"type":"text","text":"a button, asserting that an alert is shown, confirming the deletion through the alert, and"},{"type":"text","text":" "},{"type":"text","text":"then asserting that indeed the contact was removed."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"content":[{"inlineContent":[{"text":"Start a new test method to test the delete flow.","type":"text"}],"type":"paragraph"}],"code":"02-03-03-code-0000.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" for testing the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"text":" reducer.","type":"text"},{"text":" ","type":"text"},{"text":"This time we do not need to override any dependencies because we do not expect any to be","type":"text"},{"text":" ","type":"text"},{"text":"used","type":"text"}]}],"code":"02-03-03-code-0001.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Start the initial state of the feature with some contacts already added to the array. This"},{"type":"text","text":" "},{"type":"text","text":"will make it easier to test the deletion behavior."}]}],"code":"02-03-03-code-0002.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"inlineContent":[{"type":"text","text":"Emulate the user tapping on the delete button by sending the "},{"type":"codeVoice","code":"deleteButtonTapped"},{"type":"text","text":" action."},{"type":"text","text":" "},{"type":"text","text":"We will test deleting the second contact, which has an ID of "},{"type":"codeVoice","code":"UUID(1)"},{"type":"text","text":"."}],"type":"paragraph"}],"code":"02-03-03-code-0003.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We expect that the state’s "},{"type":"codeVoice","code":"destination"},{"type":"text","text":" field will be populated with the "},{"type":"codeVoice","code":"alert"},{"type":"text","text":" case"},{"type":"text","text":" "},{"type":"text","text":"since an alert should appear."}]}],"code":"02-03-03-code-0004.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"inlineContent":[{"text":"Technically we can simply repeat exactly what we did in the reducer for constructing the","type":"text"},{"text":" ","type":"text"},{"text":"alert. It’s verbose, but it does get the test passing.","type":"text"}],"type":"paragraph"}],"code":"02-03-03-code-0005.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"inlineContent":[{"type":"text","text":"However, that is a bit of a pain to repeat all of that work. There is a better way."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift where the reducer is implemented. Extend "},{"code":"AlertState","type":"codeVoice"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"with its "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" generic constrained to "},{"code":"ContactsFeature.Action","type":"codeVoice"},{"type":"text","text":". Add a static function"},{"type":"text","text":" "},{"type":"text","text":"that constructs the alert, which allows us to reuse this logic in multiple places."}],"type":"paragraph"}],"code":"02-03-03-code-0006.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"inlineContent":[{"text":"Make use of the new ","type":"text"},{"type":"codeVoice","code":"deleteConfirmation"},{"text":" static alert function in the ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"reducer, rather than building ","type":"text"},{"type":"codeVoice","code":"AlertState"},{"text":" from scratch.","type":"text"}],"type":"paragraph"}],"code":"02-03-03-code-0007.swift","type":"step","media":null,"runtimePreview":null,"caption":[{"inlineContent":[{"type":"text","text":"Also to further assert that the "},{"type":"codeVoice","code":"confirmDeletion"},{"type":"text","text":" action was received,"},{"type":"text","text":" "},{"type":"text","text":"annotate "},{"type":"codeVoice","code":"ContactsFeature.Action.Alert"},{"type":"text","text":" with the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeatureTests.swift and use the new "},{"type":"codeVoice","code":"deleteConfirmation"},{"type":"text","text":" static function"},{"type":"text","text":" "},{"type":"text","text":"to assert against the alert, rather than building "},{"type":"codeVoice","code":"AlertState"},{"type":"text","text":" from scratch."}]}],"code":"02-03-03-code-0008.swift","type":"step","media":null,"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Run the test to see this passes. This proves that when the delete button is tapped, an"},{"type":"text","text":" "},{"type":"text","text":"alert is shown to the user."}]}]},{"content":[{"inlineContent":[{"text":"Emulate the user confirming to delete contact by sending the ","type":"text"},{"code":"confirmDeletion","type":"codeVoice"},{"text":" action","type":"text"},{"text":" ","type":"text"},{"text":"in the alert.","type":"text"}],"type":"paragraph"}],"code":"02-03-03-code-0009.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Assert that the alert was dismissed and that the contact corresponding to the ID of","type":"text"},{"text":" ","type":"text"},{"code":"UUID(1)","type":"codeVoice"},{"text":" was removed.","type":"text"}]}],"code":"02-03-03-code-0010.swift","type":"step","media":null,"runtimePreview":null,"caption":[]},{"inlineContent":[{"type":"text","text":"That is all it takes to test the deletion flow. Run the test suite to see everything passes,"},{"type":"text","text":" "},{"type":"text","text":"proving that when the user taps the confirmation button in the alert that indeed the contact"},{"type":"text","text":" "},{"type":"text","text":"will be removed."}],"type":"paragraph"}],"anchor":"Testing-the-delete-contact-flow"}],"kind":"tasks"},{"title":"Navigation stacks","kind":"callToAction","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"featuredEyebrow":"Tutorial","action":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","overridingTitle":"Get started","isActive":true,"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference"}}],"references":{"02-03-02-code-0005.swift":{"identifier":"02-03-02-code-0005.swift","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.skipReceivedActions()","  }","}"],"fileName":"ContactsFeatureTests.swift","type":"file","syntax":"swift","highlights":[{"line":21}]},"02-03-02-code-0003.swift":{"fileType":"swift","type":"file","fileName":"ContactsFeatureTests.swift","syntax":"swift","highlights":[{"line":19}],"identifier":"02-03-02-code-0003.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","title":"Integrating into the app","kind":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"},"02-03-02-code-0001.swift":{"identifier":"02-03-02-code-0001.swift","fileType":"swift","highlights":[{"line":16}],"fileName":"ContactsFeatureTests.swift","syntax":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","  }","}"],"type":"file"},"02-03-01-code-0009.swift":{"type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0009.swift","syntax":"swift","fileType":"swift","highlights":[{"line":2},{"line":20}],"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","  }","}"]},"02-03-01-code-0012.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","  }","}"],"identifier":"02-03-01-code-0012.swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":27}],"type":"file","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"title":"Non-exhaustive testing","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"02-03-01-code-0010.swift":{"fileType":"swift","fileName":"ContactsFeatureTests.swift","type":"file","syntax":"swift","highlights":[{"line":24},{"line":25}],"identifier":"02-03-01-code-0010.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","    }","  }","}"]},"02-03-03-code-0000.swift":{"type":"file","identifier":"02-03-03-code-0000.swift","syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","  }","}"],"highlights":[],"fileName":"ContactsFeatureTests.swift"},"02-03-01-code-0001.swift":{"fileName":"ContactsFeatureTests.swift","syntax":"swift","type":"file","identifier":"02-03-01-code-0001.swift","highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","type":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing network requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","role":"pseudoSymbol"},"02-03-02-code-0000.swift":{"identifier":"02-03-02-code-0000.swift","highlights":[],"fileType":"swift","type":"file","syntax":"swift","fileName":"ContactsFeatureTests.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","type":"section","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"title":"Create a reducer","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"type":"topic","role":"symbol","abstract":[{"type":"text","text":"The current exhaustivity level of the test store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","title":"exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO","text":"Exhaustivity","kind":"typeIdentifier"}]},"02-03-03-code-0007.swift":{"fileType":"swift","fileName":"ContactsFeature.swift","type":"file","syntax":"swift","highlights":[{"line":12},{"line":41}],"identifier":"02-03-03-code-0007.swift","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    @CasePathable","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(.deleteConfirmation(id: id))","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","  }","}"]},"02-03-01-code-0005.swift":{"highlights":[{"line":17}],"fileName":"ContactsFeatureTests.swift","fileType":"swift","type":"file","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"],"identifier":"02-03-01-code-0005.swift"},"02-03-02-code-0002.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","  }","}"],"identifier":"02-03-02-code-0002.swift","type":"file","fileName":"ContactsFeatureTests.swift","syntax":"swift","fileType":"swift","highlights":[{"line":17},{"line":18}]},"02-03-01-code-0013.swift":{"fileName":"ContactsFeatureTests.swift","highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32}],"type":"file","syntax":"swift","identifier":"02-03-01-code-0013.swift","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"pseudoSymbol","title":"Testing state changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"kind":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","title":"Contact detail feature","type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"kind":"article","title":"Essentials","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","type":"topic","role":"article","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/essentials"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","kind":"project","role":"project","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","title":"Adding side effects","estimatedTime":"30min","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","title":"Performing a network request","type":"section","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"section","role":"pseudoSymbol"},"02-03-03-code-0002.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","  }","}"],"highlights":[{"line":2},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}],"type":"file","syntax":"swift","fileName":"ContactsFeatureTests.swift","identifier":"02-03-03-code-0002.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"section","title":"Project set up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"estimatedTime":"40min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","title":"Testing presentation","type":"topic","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"section","title":"Composing reducers","type":"section","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers"},"02-03-03-code-0003.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","    }","  }","}"],"type":"file","identifier":"02-03-03-code-0003.swift","highlights":[{"line":11},{"line":21},{"line":22},{"line":23}],"fileName":"ContactsFeatureTests.swift","syntax":"swift"},"02-03-03-code-0005.swift":{"type":"file","fileName":"ContactsFeatureTests.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","        AlertState {","          TextState(\"Are you sure?\")","        } actions: {","          ButtonState(role: .destructive, action: .confirmDeletion(id: UUID(1))) {","            TextState(\"Delete\")","          }","        }","      )","    }","  }","}"],"highlights":[{"line":24},{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30}],"syntax":"swift","identifier":"02-03-03-code-0005.swift","fileType":"swift"},"02-03-01-code-0000.swift":{"type":"file","identifier":"02-03-01-code-0000.swift","syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","  }","}"],"highlights":[],"fileName":"ContactsFeatureTests.swift"},"http://github.com/pointfreeco/swift-dependencies":{"title":"swift-dependencies","url":"http:\/\/github.com\/pointfreeco\/swift-dependencies","type":"link","titleInlineContent":[{"text":"swift-dependencies","type":"text"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}],"title":"Delete contacts","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","role":"pseudoSymbol","type":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"02-03-01-code-0004.swift":{"identifier":"02-03-01-code-0004.swift","fileType":"swift","highlights":[{"line":16},{"line":17}],"fileName":"ContactsFeatureTests.swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","        )","      )","    }","  }","}"],"type":"file"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"section","title":"Managing a timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","title":"Adding a tab view","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"kind":"overview","url":"\/tutorials\/meetcomposablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"text":" ","type":"text"},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"type":"topic","role":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","title":"Meet the Composable Architecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/skipReceivedActions(strict:fileID:file:line:column:)":{"kind":"symbol","title":"skipReceivedActions(strict:fileID:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/skipReceivedActions(strict:fileID:file:line:column:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"skipReceivedActions","kind":"identifier"},{"text":"(","kind":"text"},{"text":"strict","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"type":"topic","url":"\/documentation\/composablearchitecture\/teststore\/skipreceivedactions(strict:fileid:file:line:column:)","abstract":[{"text":"Clears the queue of received actions from effects.","type":"text"}]},"02-03-01-code-0015.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    @CasePathable","    enum Delegate {","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .run { _ in await self.dismiss() }","","      case .delegate:","        return .none","","      case .saveButtonTapped:","        return .run { [contact = state.contact] send in","          await send(.delegate(.saveContact(contact)))","          await self.dismiss()","        }","","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"identifier":"02-03-01-code-0015.swift","fileName":"ContactsFeature.swift","highlights":[{"line":14}],"type":"file","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","type":"topic","role":"article","kind":"article","abstract":[],"title":"Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation"},"02-03-01-code-0002.swift":{"fileName":"ContactsFeatureTests.swift","syntax":"swift","type":"file","identifier":"02-03-01-code-0002.swift","highlights":[{"line":13},{"line":14},{"line":15}],"fileType":"swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA#Non-exhaustive-testing":{"url":"\/documentation\/composablearchitecture\/testingtca#Non-exhaustive-testing","kind":"section","type":"topic","abstract":[],"title":"Non-exhaustive testing","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA#Non-exhaustive-testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}],"estimatedTime":"30min","title":"Multiple presentation destinations","kind":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","role":"project"},"02-03-01-code-0014.swift":{"identifier":"02-03-01-code-0014.swift","fileType":"swift","syntax":"swift","highlights":[{"line":32},{"line":33},{"line":34}],"type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"],"fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","role":"pseudoSymbol","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"pseudoSymbol","title":"Testing the add contact flow","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow"},"02-03-01-code-0017.swift":{"type":"file","fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0017.swift","syntax":"swift","fileType":"swift","highlights":[{"line":36},{"line":37},{"line":38}],"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","    await store.receive(\\.destination.dismiss) {","      $0.destination = nil","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","type":"section","title":"Integrate views","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","title":"Deriving child stores","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","type":"section","role":"pseudoSymbol","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","title":"Testing effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"02-03-03-code-0004.swift":{"identifier":"02-03-03-code-0004.swift","fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(","      )","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","type":"file","syntax":"swift","highlights":[{"line":23},{"line":24}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"role":"article","url":"\/documentation\/composablearchitecture\/testingtca","type":"topic"},"02-03-03-code-0009.swift":{"fileType":"swift","fileName":"ContactsFeatureTests.swift","type":"file","syntax":"swift","highlights":[{"line":25},{"line":26}],"identifier":"02-03-03-code-0009.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(\\.destination.alert.confirmDeletion, UUID(1)) {","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"title":"Your first feature","kind":"project","estimatedTime":"20min","role":"project","type":"topic","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"kind":"symbol","type":"topic","title":"PresentationAction.dismiss","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","abstract":[{"type":"text","text":"An action sent to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the associated presentation state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","role":"project","type":"topic","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","title":"Navigation stacks","kind":"project"},"02-03-03-code-0006.swift":{"highlights":[],"type":"file","fileName":"ContactsFeature.swift","fileType":"swift","content":["import ComposableArchitecture","","extension AlertState where Action == ContactsFeature.Action.Alert {","  static func deleteConfirmation(id: UUID) -> Self {","    Self {","      TextState(\"Are you sure?\")","    } actions: {","      ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","        TextState(\"Delete\")","      }","    }","  }","}"],"syntax":"swift","identifier":"02-03-03-code-0006.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore"},"02-03-02-code-0004.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","  }","}"],"identifier":"02-03-02-code-0004.swift","syntax":"swift","type":"file","fileName":"ContactsFeatureTests.swift","fileType":"swift","highlights":[{"line":20}]},"02-03-01-code-0003.swift":{"highlights":[{"line":15},{"line":16}],"content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","      )","    }","  }","}"],"fileType":"swift","fileName":"ContactsFeatureTests.swift","identifier":"02-03-01-code-0003.swift","type":"file","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"title":"Deleting a contact","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","kind":"project","title":"Composing features","type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Controlling dependencies","kind":"section","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","type":"section","role":"pseudoSymbol"},"02-03-01-code-0006.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: UUID(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","  }","}"],"identifier":"02-03-01-code-0006.swift","syntax":"swift","type":"file","fileName":"ContactsFeature.swift","fileType":"swift","highlights":[{"line":16}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"title":"Integrating with SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"kind":"section","type":"section","title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","role":"pseudoSymbol"},"02-03-03-code-0008.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","  }","}"],"identifier":"02-03-03-code-0008.swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":23}],"type":"file","syntax":"swift","fileType":"swift"},"02-03-02-code-0006.swift":{"highlights":[{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27}],"fileType":"swift","syntax":"swift","identifier":"02-03-02-code-0006.swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlowNonExhaustive() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    store.exhaustivity = .off","    ","    await store.send(.addButtonTapped)","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\")","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.skipReceivedActions()","    store.assert {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","      $0.destination = nil","    }","  }","}"],"fileName":"ContactsFeatureTests.swift","type":"file"},"02-03-03-code-0010.swift":{"fileType":"swift","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(0), name: \"Blob\"),","          Contact(id: UUID(1), name: \"Blob Jr.\"),","        ]","      )","    ) {","      ContactsFeature()","    }","    ","    await store.send(.deleteButtonTapped(id: UUID(1))) {","      $0.destination = .alert(.deleteConfirmation(id: UUID(1)))","    }","    await store.send(\\.destination.alert.confirmDeletion, UUID(1)) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob\")","      ]","      $0.destination = nil","    }","  }","}"],"type":"file","identifier":"02-03-03-code-0010.swift","highlights":[{"line":26},{"line":27},{"line":28},{"line":29}],"fileName":"ContactsFeatureTests.swift","syntax":"swift"},"02-03-01-code-0008.swift":{"fileType":"swift","fileName":"ContactsFeatureTests.swift","type":"file","syntax":"swift","highlights":[{"line":12},{"line":13}],"identifier":"02-03-01-code-0008.swift","content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: ???, name: \"\")","        )","      )","    }","  }","}"]},"02-03-03-code-0001.swift":{"content":["import ComposableArchitecture","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func deleteContact() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    }","  }","}"],"syntax":"swift","highlights":[{"line":10},{"line":11},{"line":12}],"identifier":"02-03-03-code-0001.swift","fileType":"swift","type":"file","fileName":"ContactsFeatureTests.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","title":"What is a side effect?","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"role":"project","kind":"project","title":"Your first presentation","estimatedTime":"30min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"kind":"section","type":"section","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","role":"pseudoSymbol","title":"Child-to-parent communication"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"type":"topic","kind":"project","estimatedTime":"1hr 0min","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing your feature","role":"project"},"02-03-01-code-0007.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","    @Presents var destination: Destination.State?","  }","  enum Action {","    case addButtonTapped","    case deleteButtonTapped(id: Contact.ID)","    case destination(PresentationAction<Destination.Action>)","    enum Alert: Equatable {","      case confirmDeletion(id: Contact.ID)","    }","  }","  @Dependency(\\.uuid) var uuid","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.destination = .addContact(","          AddContactFeature.State(","            contact: Contact(id: self.uuid(), name: \"\")","          )","        )","        return .none","        ","      case let .destination(.presented(.addContact(.delegate(.saveContact(contact))))):","        state.contacts.append(contact)","        return .none","        ","      case let .destination(.presented(.alert(.confirmDeletion(id: id)))):","        state.contacts.remove(id: id)","        return .none","        ","      case .destination:","        return .none","        ","      case let .deleteButtonTapped(id: id):","        state.destination = .alert(","          AlertState {","            TextState(\"Are you sure?\")","          } actions: {","            ButtonState(role: .destructive, action: .confirmDeletion(id: id)) {","              TextState(\"Delete\")","            }","          }","        )","        return .none","      }","    }","    .ifLet(\\.$destination, action: \\.destination) {","      Destination()","    }","  }","}"],"identifier":"02-03-01-code-0007.swift","syntax":"swift","type":"file","fileName":"ContactsFeature.swift","fileType":"swift","highlights":[{"line":23}]},"02-03-01-code-0011.swift":{"content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","  }","}"],"identifier":"02-03-01-code-0011.swift","fileName":"ContactsFeatureTests.swift","highlights":[{"line":25}],"type":"file","syntax":"swift","fileType":"swift"},"02-03-01-code-0016.swift":{"fileName":"ContactsFeatureTests.swift","fileType":"swift","type":"file","content":["import ComposableArchitecture","import Foundation","import Testing","","@testable import ContactsApp","","@MainActor","struct ContactsFeatureTests {","  @Test","  func addFlow() async {","    let store = TestStore(initialState: ContactsFeature.State()) {","      ContactsFeature()","    } withDependencies: {","      $0.uuid = .incrementing","    }","    ","    await store.send(.addButtonTapped) {","      $0.destination = .addContact(","        AddContactFeature.State(","          contact: Contact(id: UUID(0), name: \"\")","        )","      )","    }","    await store.send(\\.destination.addContact.setName, \"Blob Jr.\") {","      $0.destination?.modify(\\.addContact) { $0.contact.name = \"Blob Jr.\" }","    }","    await store.send(\\.destination.addContact.saveButtonTapped)","    await store.receive(","      \\.destination.addContact.delegate.saveContact,","      Contact(id: UUID(0), name: \"Blob Jr.\")","    ) {","      $0.contacts = [","        Contact(id: UUID(0), name: \"Blob Jr.\")","      ]","    }","  }","}"],"identifier":"02-03-01-code-0016.swift","highlights":[],"syntax":"swift"}}}