{"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"As your features and application grow you may run into performance problems, such as reducers"},{"type":"text","text":" "},{"type":"text","text":"becoming slow to execute, SwiftUI view bodies executing more often than expected, and more. This"},{"type":"text","text":" "},{"type":"text","text":"article outlines a few common pitfalls when developing features in the library, and how to fix"},{"type":"text","text":" "},{"type":"text","text":"them."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Sharing-logic-with-actions","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#CPU-intensive-calculations","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#High-frequency-actions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Store-scoping","isActive":true}],"type":"paragraph"}]}]},{"anchor":"Sharing-logic-with-actions","text":"Sharing logic with actions","type":"heading","level":3},{"inlineContent":[{"text":"There is a common pattern of using actions to share logic across multiple parts of a reducer.","type":"text"},{"text":" ","type":"text"},{"text":"This is an inefficient way to share logic. Sending actions is not as lightweight of an operation","type":"text"},{"text":" ","type":"text"},{"text":"as, say, calling a method on a class. Actions travel through multiple layers of an application, and","type":"text"},{"text":" ","type":"text"},{"text":"at each layer a reducer can intercept and reinterpret the action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"It is far better to share logic via simple methods on your ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"text":" conformance.","type":"text"},{"text":" ","type":"text"},{"text":"The helper methods can take ","type":"text"},{"type":"codeVoice","code":"inout State"},{"text":" as an argument if it needs to make mutations, and it","type":"text"},{"text":" ","type":"text"},{"text":"can return an ","type":"text"},{"type":"codeVoice","code":"Effect<Action>"},{"text":". This allows you to share logic without incurring the cost","type":"text"},{"text":" ","type":"text"},{"text":"of sending needless actions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, suppose that there are 3 UI components in your feature such that when any is changed","type":"text"},{"text":" ","type":"text"},{"text":"you want to update the corresponding field of state, but then you also want to make some mutations","type":"text"},{"text":" ","type":"text"},{"text":"and execute an effect. That common mutation and effect could be put into its own action and then","type":"text"},{"text":" ","type":"text"},{"text":"each user action can return an effect that immediately emits that shared action:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        state.count += 1","        return .send(.sharedComputation)","","      case .toggleChanged:","        state.isEnabled.toggle()","        return .send(.sharedComputation)","","      case let .textFieldChanged(text):","        state.description = text","        return .send(.sharedComputation)","","      case .sharedComputation:","        \/\/ Some shared work to compute something.","        return .run { send in","          \/\/ A shared effect to compute something","        }","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This is one way of sharing the logic and effect, but we are now incurring the cost of two actions"},{"type":"text","text":" "},{"type":"text","text":"even though the user performed a single action. That is not going to be as efficient as it would"},{"type":"text","text":" "},{"type":"text","text":"be if only a single action was sent."}],"type":"paragraph"},{"inlineContent":[{"text":"Besides just performance concerns, there are two other reasons why you should not follow this","type":"text"},{"text":" ","type":"text"},{"text":"pattern. First, this style of sharing logic is not very flexible. Because the shared logic is","type":"text"},{"text":" ","type":"text"},{"text":"relegated to a separate action it must always be run after the initial logic. But what if","type":"text"},{"text":" ","type":"text"},{"text":"instead you need to run some shared logic ","type":"text"},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"text":" the core logic? This style cannot accommodate that.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Second, this style of sharing logic also muddies tests. When you send a user action you have to","type":"text"},{"text":" ","type":"text"},{"text":"further assert on receiving the shared action and assert on how state changed. This bloats tests","type":"text"},{"text":" ","type":"text"},{"text":"with unnecessary internal details, and the test no longer reads as a script from top-to-bottom of","type":"text"},{"text":" ","type":"text"},{"text":"actions the user is taking in the feature:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let store = TestStore(initialState: Feature.State()) {","  Feature()","}","","store.send(.buttonTapped) {","  $0.count = 1","}","store.receive(\\.sharedComputation) {","  \/\/ Assert on shared logic","}","store.send(.toggleChanged) {","  $0.isEnabled = true","}","store.receive(\\.sharedComputation) {","  \/\/ Assert on shared logic","}","store.send(.textFieldChanged(\"Hello\")) {","  $0.description = \"Hello\"","}","store.receive(\\.sharedComputation) {","  \/\/ Assert on shared logic","}"]},{"type":"paragraph","inlineContent":[{"text":"So, we do not recommend sharing logic in a reducer by having dedicated actions for the logic","type":"text"},{"text":" ","type":"text"},{"text":"and executing synchronous effects.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Instead, we recommend sharing logic with methods defined in your feature’s reducer. The method has"},{"type":"text","text":" "},{"type":"text","text":"full access to all dependencies, it can take an "},{"type":"codeVoice","code":"inout State"},{"type":"text","text":" if it needs to make mutations to"},{"type":"text","text":" "},{"type":"text","text":"state, and it can return an "},{"type":"codeVoice","code":"Effect<Action>"},{"type":"text","text":" if it needs to execute effects."}]},{"type":"paragraph","inlineContent":[{"text":"The above example can be refactored like so:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        state.count += 1","        return self.sharedComputation(state: &state)","","      case .toggleChanged:","        state.isEnabled.toggle()","        return self.sharedComputation(state: &state)","","      case let .textFieldChanged(text):","        state.description = text","        return self.sharedComputation(state: &state)","      }","    }","  }","","  func sharedComputation(state: inout State) -> Effect<Action> {","    \/\/ Some shared work to compute something.","    return .run { send in","      \/\/ A shared effect to compute something","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This effectively works the same as before, but now when a user action is sent all logic is executed"},{"type":"text","text":" "},{"type":"text","text":"at once without sending an additional action. This also fixes the other problems we mentioned above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if you need to execute the shared logic "},{"inlineContent":[{"text":"before","type":"text"}],"type":"emphasis"},{"type":"text","text":" the core logic, you can do so easily:"}]},{"type":"codeListing","code":["case .buttonTapped:","  let sharedEffect = self.sharedComputation(state: &state)","  state.count += 1","  return sharedEffect"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You have complete flexibility to decide how, when and where you want to execute the shared logic.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, tests become more streamlined since you do not have to assert on internal details of"},{"type":"text","text":" "},{"type":"text","text":"shared actions being sent around. The test reads  like a user script of what the user is doing"},{"type":"text","text":" "},{"type":"text","text":"in the feature:"}]},{"type":"codeListing","code":["let store = TestStore(initialState: Feature.State()) {","  Feature()","}","","store.send(.buttonTapped) {","  $0.count = 1","  \/\/ Assert on shared logic","}","store.send(.toggleChanged) {","  $0.isEnabled = true","  \/\/ Assert on shared logic","}","store.send(.textFieldChanged(\"Hello\") {","  $0.description = \"Hello\"","  \/\/ Assert on shared logic","}"],"syntax":"swift"},{"type":"heading","text":"Sharing logic in child features","level":5,"anchor":"Sharing-logic-in-child-features"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There is another common scenario for sharing logic in features where the parent feature wants to"},{"type":"text","text":" "},{"type":"text","text":"invoke logic in a child feature. One can technically do this by sending actions from the parent"},{"type":"text","text":" "},{"type":"text","text":"to the child, but we do not recommend it (see above in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Sharing-logic-with-actions","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to learn why):"}]},{"type":"codeListing","code":["\/\/ Handling action from parent feature:","case .buttonTapped:","  \/\/ Send action to child to perform logic:","  return .send(.child(.refresh))"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Instead, we recommend invoking the child reducer directly:","type":"text"}]},{"type":"codeListing","code":["case .buttonTapped:","  return reduce(into: &state, action: .child(.refresh))"],"syntax":"swift"},{"type":"heading","text":"CPU intensive calculations","level":3,"anchor":"CPU-intensive-calculations"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are run on the main thread and so they are not appropriate for performing intense CPU"},{"type":"text","text":" "},{"type":"text","text":"work. If you need to perform lots of CPU-bound work, then it is more appropriate to use an"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":", which will operate in the cooperative thread pool, and then send actions back into"},{"type":"text","text":" "},{"type":"text","text":"the system. You should also make sure to perform your CPU intensive work in a cooperative manner by"},{"type":"text","text":" "},{"type":"text","text":"periodically suspending with "},{"code":"Task.yield()","type":"codeVoice"},{"type":"text","text":" so that you do not block a thread in the cooperative"},{"type":"text","text":" "},{"type":"text","text":"pool for too long."}]},{"type":"paragraph","inlineContent":[{"text":"So, instead of performing intense work like this in your reducer:","type":"text"}]},{"type":"codeListing","code":["case .buttonTapped:","  var result = \/\/ ...","  for value in someLargeCollection {","    \/\/ Some intense computation with value","  }","  state.result = result"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"…you should return an effect to perform that work, sprinkling in some yields every once in awhile,","type":"text"},{"text":" ","type":"text"},{"text":"and then delivering the result in an action:","type":"text"}]},{"type":"codeListing","code":["case .buttonTapped:","  return .run { send in","    var result = \/\/ ...","    for (index, value) in someLargeCollection.enumerated() {","      \/\/ Some intense computation with value","","      \/\/ Yield every once in awhile to cooperate in the thread pool.","      if index.isMultiple(of: 1_000) {","        await Task.yield()","      }","    }","    await send(.computationResponse(result))","  }","","case let .computationResponse(result):","  state.result = result"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This will keep CPU intense work from being performed in the reducer, and hence not on the main","type":"text"},{"text":" ","type":"text"},{"text":"thread.","type":"text"}]},{"type":"heading","text":"High-frequency actions","level":3,"anchor":"High-frequency-actions"},{"type":"paragraph","inlineContent":[{"text":"Sending actions in a Composable Architecture application should not be thought as simple method","type":"text"},{"text":" ","type":"text"},{"text":"calls that one does with classes, such as ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"text":" conformances. When an action is sent","type":"text"},{"text":" ","type":"text"},{"text":"into the system there are multiple layers of features that can intercept and interpret it, and","type":"text"},{"text":" ","type":"text"},{"text":"the resulting state changes can reverberate throughout the entire application.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of this, sending actions does come with a cost. You should aim to only send “significant”"},{"type":"text","text":" "},{"type":"text","text":"actions into the system, that is, actions that cause the execution of important logic and effects"},{"type":"text","text":" "},{"type":"text","text":"for your application. High-frequency actions, such as sending dozens of actions per second,"},{"type":"text","text":" "},{"type":"text","text":"should be avoided unless your application truly needs that volume of actions in order to implement"},{"type":"text","text":" "},{"type":"text","text":"its logic."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there are often times that actions are sent at a high frequency but the reducer doesn’t"},{"type":"text","text":" "},{"type":"text","text":"actually need that volume of information. For example, say you were constructing an effect that"},{"type":"text","text":" "},{"type":"text","text":"wanted to report its progress back to the system for each step of its work. You could choose to send"},{"type":"text","text":" "},{"type":"text","text":"the progress for literally every step:"}]},{"type":"codeListing","code":["case .startButtonTapped:","  return .run { send in","    var count = 0","    let max = await self.eventsClient.count()","","    for await event in self.eventsClient.events() {","      defer { count += 1 }","      await send(.progress(Double(count) \/ Double(max)))","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, what if the effect required 10,000 steps to finish? Or 100,000? Or more? It would be"},{"type":"text","text":" "},{"type":"text","text":"immensely wasteful to send 100,000 actions into the system to report a progress value that is only"},{"type":"text","text":" "},{"type":"text","text":"going to vary from 0.0 to 1.0."}]},{"type":"paragraph","inlineContent":[{"text":"Instead, you can choose to report the progress every once in awhile. You can even do the math","type":"text"},{"text":" ","type":"text"},{"text":"to make it so that you report the progress at most 100 times:","type":"text"}]},{"type":"codeListing","code":["case .startButtonTapped:","  return .run { send in","    var count = 0","    let max = await self.eventsClient.count()","    let interval = max \/ 100","","    for await event in self.eventsClient.events() {","      defer { count += 1 }","      if count.isMultiple(of: interval) {","        await send(.progress(Double(count) \/ Double(max)))","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This greatly reduces the bandwidth of actions being sent into the system so that you are not"},{"type":"text","text":" "},{"type":"text","text":"incurring unnecessary costs for sending actions."}]},{"type":"paragraph","inlineContent":[{"text":"Another example that comes up often is sliders. If done in the most direct way, by deriving a","type":"text"},{"text":" ","type":"text"},{"text":"binding from the store to hand to a ","type":"text"},{"code":"Slider","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","code":["Slider(value: store.$opacity, in: 0...1)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will send an action into the system for every little change to the slider, which can be dozens"},{"type":"text","text":" "},{"type":"text","text":"or hundreds of actions as the user is dragging the slider. If this turns out to be problematic then"},{"type":"text","text":" "},{"type":"text","text":"you can consider alternatives."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you can hold onto some local "},{"code":"@State","type":"codeVoice"},{"type":"text","text":" in the view for using with the "},{"code":"Slider","type":"codeVoice"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"then you can use the trailing "},{"code":"onEditingChanged","type":"codeVoice"},{"type":"text","text":" closure to send an action to the store:"}]},{"type":"codeListing","code":["Slider(value: self.$opacity, in: 0...1) {","  self.store.send(.setOpacity(self.opacity))","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This way an action is only sent once the user stops moving the slider.","type":"text"}]},{"anchor":"Store-scoping","type":"heading","text":"Store scoping","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the 1.5.6 release of the library a change was made to "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" that"},{"type":"text","text":" "},{"type":"text","text":"made it more sensitive to performance considerations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The most common form of scoping, that of scoping directly along boundaries of child features, is"},{"type":"text","text":" "},{"type":"text","text":"the most performant form of scoping and is the intended use of scoping. The library is slowly"},{"type":"text","text":" "},{"type":"text","text":"evolving to a state where that is the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" kind of scoping one can do on a store."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The simplest example of this directly scoping to some child state and actions for handing to a"},{"type":"text","text":" "},{"type":"text","text":"child view:"}]},{"syntax":"swift","code":["ChildView(","  store: store.scope(state: \\.child, action: \\.child)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Furthermore, scoping to a child domain to be used with one of the libraries navigation view modifiers,","type":"text"},{"text":" ","type":"text"},{"text":"such as ","type":"text"},{"code":"SwiftUI\/View\/sheet(store:onDismiss:content:)","type":"codeVoice"},{"text":", also falls under the intended","type":"text"},{"text":" ","type":"text"},{"text":"use of scope:","type":"text"}]},{"syntax":"swift","code":[".sheet(store: store.scope(state: \\.child, action: \\.child)) { store in","  ChildView(store: store)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of these examples are how "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"type":"text","text":" is intended to be used, and you"},{"type":"text","text":" "},{"type":"text","text":"can continue using it in this way with no performance concerns."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Where performance can become a concern is when using "},{"type":"codeVoice","code":"scope"},{"type":"text","text":" on "},{"type":"emphasis","inlineContent":[{"text":"computed","type":"text"}]},{"type":"text","text":" properties rather than"},{"type":"text","text":" "},{"type":"text","text":"simple stored fields. For example, say you had a computed property in the parent feature’s state"},{"type":"text","text":" "},{"type":"text","text":"for deriving the child state:"}]},{"syntax":"swift","code":["extension ParentFeature.State {","  var computedChild: ChildFeature.State {","    ChildFeature.State(","      \/\/ Heavy computation here...","    )","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then in the view, say you scoped along that computed property:"}]},{"syntax":"swift","code":["ChildView(","  store: store.scope(state: \\.computedChild, action: \\.child)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the computation in that property is heavy, it is going to become exacerbated by the changes"},{"type":"text","text":" "},{"type":"text","text":"made in 1.5, and the problem worsens the closer the scoping is to the root of the application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The problem is that in version 1.5 scoped stores stopped directly holding onto their local state,"},{"type":"text","text":" "},{"type":"text","text":"and instead hold onto a reference to the store at the root of the application. And when you access"},{"type":"text","text":" "},{"type":"text","text":"state from the scoped store, it transforms the root state to the child state on the fly."}]},{"type":"paragraph","inlineContent":[{"text":"This transformation will include the heavy computed property, and potentially compute it many times","type":"text"},{"text":" ","type":"text"},{"text":"if you need to access multiple pieces of state from the store. If you are noticing a performance","type":"text"},{"text":" ","type":"text"},{"text":"problem while depending on 1.5+ of the library, look through your code base for any place you are","type":"text"},{"text":" ","type":"text"},{"text":"using computed properties in scopes. You can even put a ","type":"text"},{"code":"print","type":"codeVoice"},{"text":" statement in the computed property","type":"text"},{"text":" ","type":"text"},{"text":"so that you can see first hand just how many times it is being invoked while running your","type":"text"},{"text":" ","type":"text"},{"text":"application.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"To fix the problem we recommend using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":" only along stored","type":"text"},{"text":" ","type":"text"},{"text":"properties of child features. Such key paths are simple getters, and so not have a problem with","type":"text"},{"text":" ","type":"text"},{"text":"performance. If you are using a computed property in a scope, then reconsider if that could instead","type":"text"},{"text":" ","type":"text"},{"text":"be done along a plain, stored property and moving the computed logic into the child view. The","type":"text"},{"text":" ","type":"text"},{"text":"further you push the computation towards the leaf nodes of your application, the less performance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"problems you will see."}]}],"kind":"content"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Learn how to improve the performance of features built in the Composable Architecture.","type":"text"}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Performance","roleHeading":"Article"},"variants":[{"paths":["\/documentation\/composablearchitecture\/performance"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ"],"anchor":"Essentials","title":"Essentials","generated":true}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"references":{"#CPU-intensive-calculations":{"type":"link","titleInlineContent":[{"type":"text","text":"CPU-intensive calculations"}],"url":"#CPU-intensive-calculations","identifier":"#CPU-intensive-calculations","title":"CPU-intensive calculations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","title":"Getting started","role":"article","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/gettingstarted","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}]},"#Store-scoping":{"type":"link","titleInlineContent":[{"type":"text","text":"Store scoping"}],"url":"#Store-scoping","identifier":"#Store-scoping","title":"Store scoping"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"title":"Sharing state","url":"\/documentation\/composablearchitecture\/sharingstate","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","type":"topic","role":"article","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","title":"scope(state:action:)","abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestingTCA":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestingTCA","title":"Testing","abstract":[{"type":"text","text":"Learn how to write comprehensive and exhaustive tests for your features built in the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture."}],"role":"article","url":"\/documentation\/composablearchitecture\/testingtca","type":"topic"},"#Sharing-logic-with-actions":{"type":"link","titleInlineContent":[{"type":"text","text":"Sharing logic with actions"}],"url":"#Sharing-logic-with-actions","identifier":"#Sharing-logic-with-actions","title":"Sharing logic with actions"},"#High-frequency-actions":{"type":"link","titleInlineContent":[{"type":"text","text":"High-frequency actions"}],"url":"#High-frequency-actions","identifier":"#High-frequency-actions","title":"High-frequency actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","kind":"symbol","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#Sharing-logic-with-actions":{"type":"topic","kind":"section","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Sharing-logic-with-actions","title":"Sharing logic with actions","url":"\/documentation\/composablearchitecture\/performance#Sharing-logic-with-actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"url":"\/documentation\/composablearchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","type":"topic","title":"Navigation","url":"\/documentation\/composablearchitecture\/navigation"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"text":" ","type":"text"},{"text":"any reducer.","type":"text"}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","role":"article","title":"Dependencies","url":"\/documentation\/composablearchitecture\/dependencymanagement","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FAQ":{"kind":"article","title":"Frequently asked questions","abstract":[{"text":"A collection of some of the most common questions and comments people have concerning the library.","type":"text"}],"url":"\/documentation\/composablearchitecture\/faq","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ","type":"topic"}}}