{"sections":[],"abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"metadata":{"role":"article","modules":[{"name":"ComposableArchitecture"}],"title":"Migrating to 1.4","roleHeading":"Article"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"type":"text","text":" "},{"type":"text","text":"APIs, and this article contains some tips for doing so."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Using-the-Reducer-macro"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Using-case-key-paths","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Receiving-test-store-actions","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Moving-off-of-TaskResult","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Identified-actions","isActive":true,"type":"reference"}]}]}]},{"type":"heading","level":3,"anchor":"Using-the-Reducer-macro","text":"Using the @Reducer macro"},{"inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"type":"text","text":" "},{"type":"text","text":"a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":". It is called "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"type":"text","text":" "},{"type":"text","text":"their type with "},{"type":"codeVoice","code":"@Reducer"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}],"type":"paragraph"},{"inlineContent":[{"text":"You can also technically drop the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" conformance:","type":"text"}],"type":"paragraph"},{"code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break.","type":"text"},{"text":" ","type":"text"},{"text":"See the documentation of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas"},{"text":" for more gotchas on using the ","type":"text"},{"code":"@Reducer","type":"codeVoice"},{"text":" macro.","type":"text"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"Using-case-key-paths","text":"Using case key paths"},{"inlineContent":[{"text":"In version 1.4 we soft-deprecated many APIs that take the ","type":"text"},{"type":"codeVoice","code":"CasePath"},{"text":" type in favor of APIs that take","type":"text"},{"text":" ","type":"text"},{"text":"what is known as a ","type":"text"},{"type":"codeVoice","code":"CaseKeyPath"},{"text":". Both of these types come from our ","type":"text"},{"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true},{"text":" ","type":"text"},{"text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do","type":"text"},{"text":" ","type":"text"},{"text":"so with structs.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths"},{"type":"text","text":" "},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro"},{"type":"text","text":" "},{"type":"text","text":"for automatically deriving case paths so that we could stop using runtime reflection, and we"},{"type":"text","text":" "},{"type":"text","text":"introduced a way of using key paths to describe case paths. And so the old "},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type has been"},{"type":"text","text":" "},{"type":"text","text":"deprecated, and the new "},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":" type has taken its place."}],"type":"paragraph"},{"inlineContent":[{"text":"This means that previously when you would use APIs involving case paths you would have to use the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" prefix operator to derive the case path. For example:","type":"text"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}],"type":"paragraph"},{"code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformances with the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" macro:"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Which automatically applies the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to the feature’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum among other"},{"type":"text","text":" "},{"type":"text","text":"things:"}],"type":"paragraph"},{"code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"},{"inlineContent":[{"text":"Further, if the feature’s ","type":"text"},{"code":"State","type":"codeVoice"},{"text":" is an enum, ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" will also be applied, along with","type":"text"},{"text":" ","type":"text"},{"code":"@dynamicMemberLookup","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"syntax":"diff"},{"inlineContent":[{"type":"text","text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be"},{"type":"text","text":" "},{"type":"text","text":"useful when scoping a store’s state to a specific case:"}],"type":"paragraph"},{"type":"codeListing","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"],"syntax":"diff"},{"inlineContent":[{"type":"text","text":"To form a case key path for any other enum, you must apply the "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro explicitly:"}],"type":"paragraph"},{"type":"codeListing","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And to access its associated values, you must also apply the "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":" attributes:"}],"type":"paragraph"},{"type":"codeListing","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator for case paths you should now be able to use"},{"type":"text","text":" "},{"type":"text","text":"key path syntax, so long as all of the enums involved are "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If you encounter any problems, create a ","type":"text"},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"text":" on the Composable Architecture","type":"text"},{"text":" ","type":"text"},{"text":"repo.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Receiving-test-store-actions","level":3,"text":"Receiving test store actions"},{"inlineContent":[{"text":"The power of case key paths and the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro has made it possible to massively simplify","type":"text"},{"text":" ","type":"text"},{"text":"how one asserts on actions received in a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":". Instead of constructing the concrete action","type":"text"},{"text":" ","type":"text"},{"text":"received from an effect like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"syntax":"swift"},{"inlineContent":[{"text":"…you can use key path syntax to describe the nesting of action cases that is received:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.child.presented.response.success)"],"syntax":"swift"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"Case key path syntax requires that every nested action is "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":". Reducer actions"},{"type":"text","text":" "},{"type":"text","text":"are typically "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"type":"text","text":"explicitly annotated:"}],"type":"paragraph"},{"code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"],"type":"codeListing","syntax":"swift"}],"type":"aside","name":"Note"},{"inlineContent":[{"type":"text","text":"And in the case of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" you can even omit the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"path component:"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.child.response.success)"],"syntax":"swift"},{"inlineContent":[{"text":"This does not assert on the ","type":"text"},{"inlineContent":[{"type":"text","text":"data"}],"type":"emphasis"},{"text":" received in the action, but typically that is already covered","type":"text"},{"text":" ","type":"text"},{"text":"by the state assertion made inside the trailing closure of ","type":"text"},{"code":"receive","type":"codeVoice"},{"text":". And if you use this style of","type":"text"},{"text":" ","type":"text"},{"text":"action receiving exclusively, you can even stop conforming your action types to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are a few advanced situations to be aware of. When receiving an action that involves an"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" (more information below in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"type":"text","text":"), then"},{"type":"text","text":" "},{"type":"text","text":"you can use the subscript "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","isActive":true},{"type":"text","text":" to"},{"type":"text","text":" "},{"type":"text","text":"receive a particular action for an element:"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.rows[id: 0].response.success)"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And the same goes for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" too:"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.path[id: 0].response.success)"],"syntax":"swift"},{"type":"heading","anchor":"Moving-off-of-TaskResult","level":3,"text":"Moving off of TaskResult"},{"inlineContent":[{"text":"In version 1.4 of the library, the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"text":" was soft-deprecated and eventually will be fully","type":"text"},{"text":" ","type":"text"},{"text":"deprecated and then removed. The original rationale for the introduction of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"text":" was to","type":"text"},{"text":" ","type":"text"},{"text":"make an equatable-friendly version of ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" for when the error produced was ","type":"text"},{"type":"codeVoice","code":"any Error"},{"text":", which is","type":"text"},{"text":" ","type":"text"},{"text":"not equatable. And the reason to want an equatable-friendly result is so that the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" type in","type":"text"},{"text":" ","type":"text"},{"text":"reducers can be equatable, and the reason for ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"text":" is to make it possible to test actions","type":"text"},{"text":" ","type":"text"},{"text":"emitted by effects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" received an action you must"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" uses the equatable conformance of "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" to confirm that you are asserting that"},{"type":"text","text":" "},{"type":"text","text":"the store received the correct action."}],"type":"paragraph"},{"inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"text":" ","type":"text"},{"text":"tests:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"text":"However, with the introduction of ","type":"text"},{"overridingTitleInlineContent":[{"type":"text","text":"case key paths"}],"isActive":true,"type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","overridingTitle":"case key paths"},{"text":" we greatly improved the","type":"text"},{"text":" ","type":"text"},{"text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the","type":"text"},{"text":" ","type":"text"},{"text":"case of the enum you expect to receive, and you can even omit the associated data from the action","type":"text"},{"text":" ","type":"text"},{"text":"since typically that is covered in the state assertion:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum to be equatable since we are only asserting that","type":"text"},{"text":" ","type":"text"},{"text":"the case of the action was received. We are not testing the data in the action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We feel that with this better syntax there is less of a reason to have ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" and so we","type":"text"},{"text":" ","type":"text"},{"text":"do plan on removing it eventually. If you have an important use case for ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference"},{"text":" that you","type":"text"},{"text":" ","type":"text"},{"text":"think merits it being in the library, please ","type":"text"},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}],"overridingTitle":"open a discussion","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Identified-actions","level":3,"text":"Identified actions"},{"inlineContent":[{"text":"In version 1.4 of the library we introduced the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true,"type":"reference"},{"text":" type which makes it more","type":"text"},{"text":" ","type":"text"},{"text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would","type":"text"},{"text":" ","type":"text"},{"text":"have a case in your ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum for a particular row that holds the ID of the state being acted","type":"text"},{"text":" ","type":"text"},{"text":"upon as well as the action:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"],"syntax":"swift"},{"inlineContent":[{"text":"This can be updated to hold onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"text":" instead of those piece of data directly in the","type":"text"},{"text":" ","type":"text"},{"text":"case:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","isActive":true},{"type":"text","text":" with a case path using the"},{"type":"text","text":" "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator:"}],"type":"paragraph"},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"],"syntax":"swift"},{"inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum holds the","type":"text"},{"text":" ","type":"text"},{"text":"identified action:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and"},{"type":"text","text":" "},{"type":"text","text":"type-inference."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"type":"text","text":" "},{"type":"text","text":"will need to insert a "},{"type":"codeVoice","code":".element"},{"type":"text","text":" layer:"}],"type":"paragraph"},{"type":"codeListing","code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"],"syntax":"diff"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"title":"Migrating to 1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" type is now officially ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":" isolated.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","type":"topic","role":"article","kind":"article"},"#Receiving-test-store-actions":{"identifier":"#Receiving-test-store-actions","url":"#Receiving-test-store-actions","title":"Receiving test store actions","type":"link","titleInlineContent":[{"text":"Receiving test store actions","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","url":"\/documentation\/composablearchitecture\/migratingto1.10","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"code":"Shared","type":"codeVoice"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"code":"appStorage","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileStorage","type":"codeVoice"},{"text":" persistence strategies.","type":"text"}],"kind":"article","type":"topic","title":"Migrating to 1.10"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"title":"Migrating to 1.15","abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"text":" ","type":"text"},{"text":"concurrency with no warnings or errors.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.15","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6","abstract":[{"text":"Update your code to make use of the new","type":"text"},{"text":" ","type":"text"},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"text":" method when you need to","type":"text"},{"text":" ","type":"text"},{"text":"assert on the payload inside an action received.","type":"text"}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","title":"Migrating to 1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"title":"IfLetStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore","kind":"symbol","deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"IfLetStore"}],"role":"symbol","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}]},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"type":"link","titleInlineContent":[{"text":"discussion","type":"text"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","title":"discussion"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"type":"topic","title":"StackAction","kind":"symbol","abstract":[{"text":"A wrapper type for actions that can be presented in a navigation stack.","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","url":"\/documentation\/composablearchitecture\/stackaction","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"type":"topic","role":"symbol","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"title":"dependency(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.16","type":"topic","title":"Migrating to 1.16","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" when possible. Learn how this may affect your code."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","type":"topic","role":"article","title":"Migrating to 1.9","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"codeVoice"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"method on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","type":"reference","isActive":true},{"text":" method for overriding dependencies.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"text":" ","type":"text"},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","type":"topic","title":"Migrating to 1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13"},"#Using-the-Reducer-macro":{"identifier":"#Using-the-Reducer-macro","url":"#Using-the-Reducer-macro","title":"Using the @Reducer macro","type":"link","titleInlineContent":[{"text":"Using the @Reducer macro","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","title":"scope(state:action:)","abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","abstract":[{"text":"Store internals have been rewritten for performance and future features, and are now compatible with","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI’s ","type":"text"},{"code":"@StateObject","type":"codeVoice"},{"text":" property wrapper.","type":"text"}],"type":"topic","title":"Migrating to 1.19","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.19"},"#Identified-actions":{"type":"link","titleInlineContent":[{"text":"Identified actions","type":"text"}],"identifier":"#Identified-actions","url":"#Identified-actions","title":"Identified actions"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"kind":"article","title":"Migrating to 1.7","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.7","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.18","role":"article","title":"Migrating to 1.18","abstract":[{"text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit","type":"text"},{"text":" ","type":"text"},{"text":"navigation helper has been introduced.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"title":"Migrating to 1.5","role":"article","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"text":" operation on ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" ","type":"text"},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"url":"\/documentation\/composablearchitecture\/identifiedaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}],"role":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","kind":"symbol","navigatorTitle":[{"text":"IdentifiedAction","kind":"identifier"}],"title":"IdentifiedAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/foreachstore","type":"topic","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"role":"symbol","deprecated":true,"title":"ForEachStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","role":"article","title":"Migrating to 1.17.1","abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"text":" ","type":"text"},{"text":"Architecture has been updated to extend support to this new version.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/taskresult","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"title":"TaskResult","kind":"symbol","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"url":"\/documentation\/composablearchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"title":"PresentationAction.presented(_:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","abstract":[{"type":"text","text":"An action sent to the associated, non-"},{"code":"nil","type":"codeVoice"},{"text":" presentation state.","type":"text"}],"role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"presented","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}],"kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"title":"Store","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","kind":"symbol","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"kind":"article","title":"Migrating to 1.12","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","role":"article","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","title":"subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","fragments":[{"text":"subscript","kind":"keyword"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AnyCasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"text":"<","kind":"text"},{"text":"IdentifiedAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","abstract":[],"role":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8","title":"Migrating to 1.8","role":"article","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"text":" macro, including automatic","type":"text"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"kind":"article"},"#Moving-off-of-TaskResult":{"identifier":"#Moving-off-of-TaskResult","url":"#Moving-off-of-TaskResult","title":"Moving off of TaskResult","type":"link","titleInlineContent":[{"text":"Moving off of ","type":"text"},{"code":"TaskResult","type":"codeVoice"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"role":"symbol","kind":"symbol","title":"Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/reducer#Gotchas","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","kind":"section","title":"Gotchas"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"title":"PresentationAction","url":"\/documentation\/composablearchitecture\/presentationaction","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"PresentationAction"}],"navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"abstract":[{"text":"The ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper and related tools have been extracted to their own","type":"text"},{"text":" ","type":"text"},{"text":"library so that they can be used in non-Composable Architecture applications. This a","type":"text"},{"text":" ","type":"text"},{"text":"backwards compatible change, but some new deprecations have been introduced.","type":"text"}],"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17","title":"Migrating to 1.17","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:element:fileID:filePath:line:column:)-6zye8":{"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:element:fileid:filepath:line:column:)-6zye8","role":"symbol","type":"topic","title":"forEach(_:action:element:fileID:filePath:line:column:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ElementState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ID","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Element","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":", ","kind":"text"},{"text":"IdentifiedAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"element","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-6zye8","abstract":[{"text":"Embeds a child reducer in a parent domain that works on elements of a collection in parent","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"#Using-case-key-paths":{"identifier":"#Using-case-key-paths","url":"#Using-case-key-paths","title":"Using case key paths","type":"link","titleInlineContent":[{"text":"Using case key paths","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"title":"WithViewStore","role":"symbol","type":"topic","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore","deprecated":true},"http://github.com/pointfreeco/swift-case-paths":{"type":"link","titleInlineContent":[{"text":"CasePaths","type":"text"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","title":"CasePaths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"abstract":[{"text":"Update your code to use the new ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","title":"Migrating to 1.11","kind":"article","role":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"kind":"section","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"role":"symbol","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"type":"topic","url":"\/documentation\/composablearchitecture\/teststore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"title":"TestStore"}}}