{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"]]},"abstract":[{"text":"Provides a view with access to a feature’s ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","isActive":true},{"text":"s.","type":"text"}],"seeAlsoSections":[{"title":"View actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending"],"generated":true,"anchor":"View-actions"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"attribute","text":"@attached"},{"kind":"text","text":"(extension, conformances: "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17ViewActionSendingP","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending","text":"ViewActionSending"},{"kind":"text","text":") "},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":".Type) "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"."},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","kind":"typeIdentifier","text":"ViewAction","preciseIdentifier":"s:22ComposableArchitecture10ViewActionP"}]}]},{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"overview"},{"inlineContent":[{"text":"If you want to restrict what actions can be sent from the view you can use this macro along with the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","type":"reference","isActive":true},{"text":" protocol. You start by conforming your reducer’s ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum to the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","type":"reference","isActive":true},{"text":" protocol, and moving view-specific actions to its own inner enum:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  enum Action: ViewAction {","    case loginResponse(Bool)","    case view(View)","","    enum View {","      case loginButtonTapped","    }","  }","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then you can apply the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","isActive":true},{"type":"text","text":" macro to your view by specifying the type of the"},{"type":"text","text":" "},{"type":"text","text":"reducer that powers the view:"}],"type":"paragraph"},{"code":["@ViewAction(for: Feature.self)","struct FeatureView: View {","  let store: StoreOf<Feature>","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The macro does two things:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"It adds a ","type":"text"},{"code":"send","type":"codeVoice"},{"text":" method to the view that you can use instead of ","type":"text"},{"code":"store.send","type":"codeVoice"},{"text":". This allows you","type":"text"},{"text":" ","type":"text"},{"text":"to send view actions more simply, without wrapping the action in ","type":"text"},{"code":".view(…)","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"diff","code":[" Button(\"Login\") {","-  store.send(.view(.loginButtonTapped))","+  send(.loginButtonTapped)"," }"]}]},{"content":[{"inlineContent":[{"text":"It creates warning diagnostics if you try sending actions through ","type":"text"},{"code":"store.send","type":"codeVoice"},{"text":" rather than","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"code":"send","type":"codeVoice"},{"text":" method on the view:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["Button(\"Login\") {","  store.send(.view(.loginButtonTapped))","\/\/┬─────────","\/\/╰─ ⚠️ Do not use 'store.send' directly when using '@ViewAction'","}"],"type":"codeListing"}]}],"type":"unorderedList"}],"kind":"content"}],"kind":"symbol","metadata":{"externalID":"s:22ComposableArchitecture10ViewAction3foryxm_tcAA7ReducerRzAaB0D0Rpzlufm","title":"ViewAction(for:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":".Type)"}],"roleHeading":"Macro","symbolKind":"macro","modules":[{"name":"ComposableArchitecture"}],"role":"symbol"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/viewaction(for:)"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"identifier"}],"role":"symbol","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"required":true,"title":"State","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"required":true,"type":"topic","abstract":[{"text":"A type that holds all possible actions that cause the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference"},{"text":" of the reducer to change","type":"text"},{"text":" ","type":"text"},{"text":"and\/or kick off a side ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"text":" that can communicate with the outside world.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/action","title":"Action","fragments":[{"text":"associatedtype","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Action","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"role":"symbol","kind":"symbol","title":"Effect","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"type":"topic","kind":"symbol","navigatorTitle":[{"text":"Store","kind":"identifier"}],"title":"Store","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction(for:)":{"title":"ViewAction(for:)","url":"\/documentation\/composablearchitecture\/viewaction(for:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":".Type)"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"Provides a view with access to a feature’s "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","isActive":true},{"type":"text","text":"s."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewActionSending":{"abstract":[{"text":"A type that represents a view with a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" that can send ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"text":"s.","type":"text"}],"title":"ViewActionSending","url":"\/documentation\/composablearchitecture\/viewactionsending","type":"topic","navigatorTitle":[{"text":"ViewActionSending","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewActionSending","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewActionSending","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"}],"navigatorTitle":[{"text":"Reducer","kind":"identifier"}],"abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction":{"url":"\/documentation\/composablearchitecture\/viewaction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewAction","kind":"identifier"}],"abstract":[{"text":"Defines the actions that can be sent from a view.","type":"text"}],"navigatorTitle":[{"text":"ViewAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","role":"symbol","type":"topic","kind":"symbol","title":"ViewAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"url":"\/documentation\/composablearchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"}}}